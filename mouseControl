import cv2
import numpy as np
import mediapipe as mp
import pyautogui

# Initialize MediaPipe Hands and drawing utilities
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Define the tip index for the index finger
index_tip_index = 8

# Capture video from the webcam
cap = cv2.VideoCapture(0)

# Get the screen size
screen_width, screen_height = pyautogui.size()

# Process each frame to detect and draw hand landmarks
with mp_hands.Hands(
        static_image_mode=False,
        max_num_hands=1,
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5) as hands:
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Flip the frame horizontally for a later selfie-view display
        frame = cv2.flip(frame, 1)

        # Convert the BGR image to RGB
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Process the frame and detect hands
        results = hands.process(rgb_frame)

        # Draw hand landmarks on the frame
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(
                    frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                # Get the coordinates of the index finger tip
                h, w, c = frame.shape
                index_tip_x = int(hand_landmarks.landmark[index_tip_index].x * w)
                index_tip_y = int(hand_landmarks.landmark[index_tip_index].y * h)

                # Map the fingertip position to the screen size
                screen_x = np.interp(index_tip_x, [0, w], [0, screen_width])
                screen_y = np.interp(index_tip_y, [0, h], [0, screen_height])

                # Move the mouse cursor
                pyautogui.moveTo(screen_x, screen_y)

                tipThumb_x, tipThumb_y = int(hand_landmarks.landmark[4].x * w), int(hand_landmarks.landmark[4].y * h)
                tipIndex5_x, tipIndex5_y = int(hand_landmarks.landmark[5].x * w), int(hand_landmarks.landmark[5].y * h)

                if (tipIndex5_x < tipThumb_x + 30) & (tipIndex5_y < tipThumb_y + 30) & (tipIndex5_y > tipThumb_y - 30) & (tipIndex5_x > tipThumb_x - 30):
                    pyautogui.click(screen_x, screen_y)

        # Display the frame
        cv2.imshow('Mouse Control', frame)

        # Break the loop when 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release the capture and destroy all windows
cap.release()
cv2.destroyAllWindows()
